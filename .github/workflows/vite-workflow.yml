name: NodeJS with Wite

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # build:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Use Node.js 18.x
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: 18.x

  #   - name: Restoring npm cache
  #     id: npm-cache
  #     uses: actions/cache@v3
  #     with:
  #       path: '**/node_modules'
  #       key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

  #   - name: Install npm packages
  #     if: steps.npm-cache.outputs.cache-hit != 'true'
  #     run: npm install

  # unit-ui-testing:
  #   needs: build
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Use Node.js 18.x
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: 18.x

  #   - name: Restoring npm cache
  #     id: npm-cache
  #     uses: actions/cache@v3
  #     with:
  #       path: '**/node_modules'
  #       key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

  #   - name: Install npm packages
  #     if: steps.npm-cache.outputs.cache-hit != 'true'
  #     run: npm install

  #   - name: Unit tests
  #     run: npm test

  # integration-ui-testing:
  #   needs: unit-ui-testing
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Use Node.js 18.x
  #     uses: actions/setup-node@v4
  #     with:
  #       node-version: 18.x

  #   - name: Restoring npm cache
  #     id: npm-cache
  #     uses: actions/cache@v3
  #     with:
  #       path: '**/node_modules'
  #       key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

  #   - name: Build
  #     if: steps.npm-cache.outputs.cache-hit != 'true'
  #     run: npm install

  #   - name: Unit tests
  #     run: npm run integration
  
  deploy:
    # needs: integration-ui-testing
    runs-on: ubuntu-latest
    env:
      CR_REGISTRY: ${{ secrets.CR_REGISTRY }}
      CR_REPOSUTORY:  ${{ secrets.CR_REPOSUTORY }}
      KEY: ${{ secrets.KEY }}
      KEY_PHRASE: ${{ secrets.KEY_PHRASE }}
      OATH_KEY: ${{ secrets.OATH_KEY }}

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker buildx
      uses: docker/setup-buildx-action@v1

    - name: Login (Yandex Cloud)
      id: login-cr
      uses: yc-actions/yc-cr-login@v1
      with:
        yc-sa-json-credentials: ${{ secrets.AUTHORISED_KEY }}

    - name: Build and push docker image to Yandex Container Registry
      id: build_push
      uses: docker/build-push-action@v4
      with:
        push: true
        platforms: linux/amd64
        provenance: false
        tags: ${{ env.CR_REGISTRY }}/${{ env.CR_REPOSUTORY }}:front-build-${{ github.sha }}
        file: ./Dockerfile
        context: .

    - name: Connect to VM via SSH and deploy Front
      uses: appleboy/ssh-action@master
      with:
        host: 84.201.170.120
        username: romashov
        key: ${{ env.KEY}}
        passphrase: ${{ env.KEY_PHRASE }}
        port: 22
        script: |
          echo ${{ env.OATH_KEY }} | docker login \
            --username oauth \
            --password-stdin \
           cr.yandex
          docker ps -a
          if [ "$(docker ps -q -f name="front")" ]; then
            docker rm -f front
          fi
          docker pull ${{ env.CR_REGISTRY }}/${{ env.CR_REPOSUTORY }}:front-build-${{ github.sha }}
          sudo docker run --name front -dp 8080:8080 ${{ env.CR_REGISTRY }}/${{ env.CR_REPOSUTORY }}:front-build-${{ github.sha }}
          docker image prune -a -f
          docker container prune -f